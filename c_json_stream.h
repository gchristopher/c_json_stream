/*

c_json_stream.h

Simple streaming JSON write library. Contains minimal procedures to support the
production of a JSON-formatted data stream.

This library is closely patterned off the javax.json.stream JsonGenerator 
Interface. This is intended to serve the same purpose; a tool exists solely  
to easily write JSON-formatted data. 

This library enforces the structural constraints of JSON (objects, arrays, members, 
pairs, elements), but does not enforce JSON string or number formatting rules. 

*/

#ifndef SIMPLE_JSON_STREAM_H
#define SIMPLE_JSON_STREAM_H

/* Maximum supported depth of nested objects and arrays.
   Pre-define as higher prior to including this header, if needed. */
#ifndef MAX_JSON_NESTED_DEPTH
#define MAX_JSON_NESTED_DEPTH 200
#endif

/* Maximum length of string buffer if not writing to a file. This needs to be
   long enough to contain all characters generated by a single JSON streaming
   function call. A static buffer is used. Pre-define as higher or lower prior 
   to including this header, if needed. */
#ifndef JSON_STRING_BUFFER_LEN
#define JSON_STRING_BUFFER_LEN 1000
#endif

/* Most recent error description is retained. */
#define MAX_ERROR_STRING_LENGTH 200

/* Enough to cover the JSON syntax minus literal formatting, even though this 
library does not parse. */
typedef enum {
  JSON_OBJECT,   /* object   ::= {} | { members }             */
  JSON_MEMBER,   /* member   ::= pair | pair, members         */
  JSON_PAIR,     /* pair     ::= string : value               */
  JSON_ARRAY,    /* array    ::= [] | [ elements ]            */
  JSON_ELEMENT,  /* elements ::= value | value , elements     */
  JSON_VALUE,    /* value    ::= literal                      */
  JSON_STRING,   /* Literals, also includes object and array. */
  JSON_NUMBER,
  JSON_TRUE,
  JSON_FALSE,
  JSON_NULL
} JSON_TYPE;

/* json_stream_struct: Tracks the state of an in-progress JSON format stream. */
typedef struct {
  /* Boolean value to flag whether to print human friendly indentation and newlines. */
  int human_readable; 
  char indent_token[10]; /* Two spaces by default. */

  /* Valid JSON may have only one top-level element. */
  int file_started;

  /* Used solely to track whether a comma is due to be printed in an object or array.
     If an open brace or bracket, do not print a comma, otherwise print one. */
  JSON_TYPE prior_element;
  
  /* Tracks nested objects and arrays for appropriate close brace/brackets. */
  JSON_TYPE object_array_stack[MAX_JSON_NESTED_DEPTH];
  int stack_depth;
 
  /* If out is NULL (== 0), data will be written to the stream_buffer variable
     instead of to a file. */

  /* Target handle to which data should be written for file output functions. */
  FILE *out;

  /* String buffer to contain the generated JSON if not writing to a file. 
     Discarded and overwritten at the start of each call. */
  char stream_buffer[JSON_STRING_BUFFER_LEN];

  /* Tracks the length of the contents of stream_buffer after the most recent
     function call. */
  int buffer_len;

  /* Most recent error description. */
  char error_string[MAX_ERROR_STRING_LENGTH];

} json_stream_struct;

/* Helper function to initialize a stream tracking object. */
void json_init_stream(json_stream_struct *js, int human_readable, FILE *out_file);



/* Valid JSON must begin with an object or an array.  */

/* Start a brace-enclosed object. 
   An object may only begin in an array context or when no context has yet been started. (The beginning of a file) */
int json_start_object(json_stream_struct *js);
  
/* Start an named object. (A name: value pair where the value is a new object.)
   Must be in an object or array context. */
int json_start_object_named(json_stream_struct *js, char *name);

/* Start a bracket-enclosed array.
   An array may only begin in an array context or when no context has yet been started. (The beginning of a file) */
int json_start_array(json_stream_struct *js);

/* Start an named array. (A name: value pair where the value is an array.)
   Must be in an object context. */
int json_start_array_named(json_stream_struct *js, char *name);
  
/* Close an array or object. */
int json_end_context(json_stream_struct *js);
  
/* Write a singleton value. Must be in an array context.
   String values will have enclosing quotes added. 
   Number values should be serialized as a character array prior to passing. */
int json_write_value(json_stream_struct *js, JSON_TYPE value_type, char *value);
  
/* Write a name: value pair. Must be in an object context.
   String values will have enclosing quotes added. 
   Number values should be serialized as a character array prior to passing. */
int json_write_pair(json_stream_struct *js, char *name, JSON_TYPE value_type, char *value);

/* Close all open objects and arrays, terminating the file. */
int json_end_file(json_stream_struct *js);

/* Permit registration of a global function to sanitize text strings. */
void (*string_sanitize_fn)(char *str);

#endif
